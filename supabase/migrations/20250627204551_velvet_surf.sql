/*
  # Fix User Registration Database Errors

  This migration addresses the "Database error saving new user" issue by:

  1. Database Functions
     - Create the missing `create_user_profile_manual` RPC function
     - Create a proper user signup trigger function
     - Create a function to handle new user creation with role assignment

  2. Triggers
     - Add trigger to automatically create user profiles when auth users are created
     - Ensure proper role assignment based on email or token

  3. Security Policies
     - Update RLS policies to allow profile creation during signup
     - Ensure proper permissions for user registration flow

  4. Additional Functions
     - Add utility functions for user management
*/

-- Create function to handle new user signup with proper role assignment
CREATE OR REPLACE FUNCTION handle_new_user_signup()
RETURNS TRIGGER AS $$
DECLARE
  user_role user_role := 'regular';
  user_token text;
BEGIN
  -- Get token from user metadata if available
  user_token := NEW.raw_user_meta_data->>'token';
  
  -- Determine role based on email or token
  IF NEW.email IN ('rishabh.biry@gmail.com', 'biryrishabh01@gmail.com', 'biryrishabh@gmail.com') THEN
    user_role := 'admin';
  ELSIF user_token IS NOT NULL THEN
    -- Check if token exists and is active
    IF EXISTS (
      SELECT 1 FROM user_tokens 
      WHERE token = user_token AND is_active = true
    ) THEN
      user_role := 'specialized';
    END IF;
  END IF;

  -- Create user profile
  INSERT INTO public.user_profiles (id, email, role, token_used, created_at, updated_at)
  VALUES (
    NEW.id,
    NEW.email,
    user_role,
    user_token,
    NOW(),
    NOW()
  );

  -- Create user record in users table
  INSERT INTO public.users (id, email, created_at, updated_at)
  VALUES (
    NEW.id,
    NEW.email,
    NOW(),
    NOW()
  );

  -- Create user statistics record
  INSERT INTO public.user_statistics (user_id, total_hours, average_daily_hours, max_session_hours, days_since_start, current_streak, updated_at)
  VALUES (
    NEW.id,
    0,
    0,
    0,
    0,
    0,
    NOW()
  );

  -- Create default achievements for the user
  INSERT INTO public.achievements (user_id, title, description, icon, category, completed, created_at)
  VALUES 
    (NEW.id, 'Welcome!', 'Welcome to the platform', 'ðŸ‘‹', 'General', true, NOW()),
    (NEW.id, 'First Steps', 'Complete your first hour of work', 'ðŸ‘¶', 'Progress', false, NOW()),
    (NEW.id, 'Dedicated', 'Log 10 hours of work', 'ðŸ’ª', 'Progress', false, NOW()),
    (NEW.id, 'Consistent', 'Work for 7 days in a row', 'ðŸ”¥', 'Streak', false, NOW()),
    (NEW.id, 'Expert', 'Complete 100 hours of work', 'ðŸŽ“', 'Progress', false, NOW());

  RETURN NEW;
EXCEPTION
  WHEN OTHERS THEN
    -- Log the error but don't fail the user creation
    RAISE WARNING 'Error in handle_new_user_signup: %', SQLERRM;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the manual profile creation function that AuthContext expects
CREATE OR REPLACE FUNCTION create_user_profile_manual(
  user_id uuid,
  user_email text,
  user_token text DEFAULT NULL
)
RETURNS user_profiles AS $$
DECLARE
  user_role user_role := 'regular';
  new_profile user_profiles;
BEGIN
  -- Determine role based on email or token
  IF user_email IN ('rishabh.biry@gmail.com', 'biryrishabh01@gmail.com', 'biryrishabh@gmail.com') THEN
    user_role := 'admin';
  ELSIF user_token IS NOT NULL THEN
    -- Check if token exists and is active
    IF EXISTS (
      SELECT 1 FROM user_tokens 
      WHERE token = user_token AND is_active = true
    ) THEN
      user_role := 'specialized';
    END IF;
  END IF;

  -- Create or update user profile
  INSERT INTO public.user_profiles (id, email, role, token_used, created_at, updated_at)
  VALUES (user_id, user_email, user_role, user_token, NOW(), NOW())
  ON CONFLICT (id) 
  DO UPDATE SET 
    email = EXCLUDED.email,
    role = EXCLUDED.role,
    token_used = EXCLUDED.token_used,
    updated_at = NOW()
  RETURNING * INTO new_profile;

  -- Ensure user record exists
  INSERT INTO public.users (id, email, created_at, updated_at)
  VALUES (user_id, user_email, NOW(), NOW())
  ON CONFLICT (id) 
  DO UPDATE SET 
    email = EXCLUDED.email,
    updated_at = NOW();

  -- Ensure user statistics record exists
  INSERT INTO public.user_statistics (user_id, total_hours, average_daily_hours, max_session_hours, days_since_start, current_streak, updated_at)
  VALUES (user_id, 0, 0, 0, 0, 0, NOW())
  ON CONFLICT (user_id) DO NOTHING;

  -- Create default achievements if they don't exist
  INSERT INTO public.achievements (user_id, title, description, icon, category, completed, created_at)
  SELECT user_id, title, description, icon, category, completed, NOW()
  FROM (VALUES 
    ('Welcome!', 'Welcome to the platform', 'ðŸ‘‹', 'General', true),
    ('First Steps', 'Complete your first hour of work', 'ðŸ‘¶', 'Progress', false),
    ('Dedicated', 'Log 10 hours of work', 'ðŸ’ª', 'Progress', false),
    ('Consistent', 'Work for 7 days in a row', 'ðŸ”¥', 'Streak', false),
    ('Expert', 'Complete 100 hours of work', 'ðŸŽ“', 'Progress', false)
  ) AS default_achievements(title, description, icon, category, completed)
  WHERE NOT EXISTS (
    SELECT 1 FROM public.achievements 
    WHERE achievements.user_id = create_user_profile_manual.user_id 
    AND achievements.title = default_achievements.title
  );

  RETURN new_profile;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop existing trigger if it exists
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Create trigger for new user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION handle_new_user_signup();

-- Update RLS policies to allow profile creation during signup

-- Drop existing policies that might conflict
DROP POLICY IF EXISTS "Allow profile creation during signup" ON user_profiles;
DROP POLICY IF EXISTS "Allow user registration during signup" ON users;
DROP POLICY IF EXISTS "Allow achievement creation during signup" ON achievements;
DROP POLICY IF EXISTS "Allow statistics creation during signup" ON user_statistics;

-- Create comprehensive policies for user registration
CREATE POLICY "Allow profile creation during signup" ON user_profiles
  FOR INSERT 
  TO anon, authenticated, supabase_auth_admin
  WITH CHECK (true);

CREATE POLICY "Allow user registration during signup" ON users
  FOR INSERT 
  TO anon, authenticated, supabase_auth_admin
  WITH CHECK (true);

CREATE POLICY "Allow achievement creation during signup" ON achievements
  FOR INSERT 
  TO anon, authenticated, supabase_auth_admin
  WITH CHECK (true);

CREATE POLICY "Allow statistics creation during signup" ON user_statistics
  FOR INSERT 
  TO anon, authenticated, supabase_auth_admin
  WITH CHECK (true);

-- Grant necessary permissions
GRANT EXECUTE ON FUNCTION handle_new_user_signup() TO anon, authenticated, supabase_auth_admin;
GRANT EXECUTE ON FUNCTION create_user_profile_manual(uuid, text, text) TO anon, authenticated, supabase_auth_admin;

-- Ensure the service role can manage everything
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;